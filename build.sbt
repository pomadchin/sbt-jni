import scala.sys.process._

val scalaVersions = Seq("3.0.0", "2.13.5", "2.12.13")
val macrosParadiseVersion = "2.1.1"

ThisBuild / organization := "ch.jodersky"
 ThisBuild / scalacOptions ++= Seq(
  "-deprecation",
  "-feature",
  "-language:experimental.macros"
)
ThisBuild / licenses := Seq(("BSD New", url("http://opensource.org/licenses/BSD-3-Clause")))
ThisBuild / homepage := Some(url("https://github.com/jodersky/sbt-jni"))
ThisBuild / developers := List(
  Developer(
    "jodersky",
    "Jakob Odersky",
    "jakob@odersky.com",
    url("https://jakob.odersky.com")
  )
)

lazy val root = (project in file("."))
  .aggregate(macros, core, plugin)
  .settings(
    scalaVersion := scalaVersions.head,
    publish := {},
    publishLocal := {},
    // make sbt-pgp happy
    publishTo := Some(Resolver.file("Unused transient repository", target.value / "unusedrepo")),
    addCommandAlias("test-plugin", ";+macros/publishLocal;scripted")
  )

lazy val macros = project
  .disablePlugins(ScriptedPlugin)
  .settings(
    name := "sbt-jni-macros",
    scalaVersion := scalaVersions.head,
    crossScalaVersions := scalaVersions,
    libraryDependencies ++= {
      CrossVersion.partialVersion(scalaVersion.value) match {
        case Some((3, _)) => Seq()
        case _            => Seq("org.scala-lang" % "scala-compiler" % scalaVersion.value % Provided)
      }
    }
  )

lazy val core = project
  .disablePlugins(ScriptedPlugin)
  .dependsOn(macros)
  .settings(
    name := "sbt-jni-core",
    scalaVersion := scalaVersions.head,
    crossScalaVersions := scalaVersions,
    libraryDependencies ++= {
      CrossVersion.partialVersion(scalaVersion.value) match {
        case Some((3, _)) => Seq()
        case _            => Seq("org.scala-lang" % "scala-compiler" % scalaVersion.value % Provided)
      }
    }
  )

lazy val plugin = project
  .enablePlugins(SbtPlugin)
  .settings(
    name := "sbt-jni",
    libraryDependencies += "org.ow2.asm" % "asm" % "6.2.1",
    // make project settings available to source
    Compile / sourceGenerators += Def.task {
      val src = s"""|/* Generated by sbt */
                    |package ch.jodersky.sbt.jni
                    |
                    |private[jni] object ProjectVersion {
                    |  final val MacrosParadise = "${macrosParadiseVersion}"
                    |  final val Macros = "${version.value}"
                    |}
                    |""".stripMargin
      val file = sourceManaged.value / "ch" / "jodersky" / "sbt" / "jni" / "ProjectVersion.scala"
      IO.write(file, src)
      Seq(file)
    }.taskValue,
    scriptedLaunchOpts := Seq(
      "-Dplugin.version=" + version.value,
      "-Xmx2g",
      "-Xss2m"
    )
  )
